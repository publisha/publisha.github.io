<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Digital Publisher Guide</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2017-03-03T16:44:58+00:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Chris Jennings</name>
   <email></email>
 </author>

 
 <entry>
   <title>Writing with Atom</title>
   <link href="http://localhost:4000/conversion/markdown/2017/03/03/writing-with-atom/"/>
   <updated>2017-03-03T15:25:00+00:00</updated>
   <id>http://localhost:4000/conversion/markdown/2017/03/03/writing-with-atom</id>
   <content type="html">&lt;p&gt;I just think that &lt;a href=&quot;https://atom.io&quot; title=&quot;Get Atom for yourself&quot;&gt;Atom&lt;/a&gt; is a brilliant text editor, and I now use it all the time. It’s good for code / HTML, CSS and all that, but it is also really good for writing and here’s why.&lt;/p&gt;

&lt;h2 id=&quot;markdown&quot;&gt;Markdown&lt;/h2&gt;

&lt;p&gt;You need to learn it. But so easy. And anyway Atom can help.&lt;/p&gt;

&lt;p&gt;I won’t repeat here what you can find online about Markdown, like who invented it (&lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot; title=&quot;Take a look here&quot;&gt;John Gruber&lt;/a&gt;) and what it &lt;a href=&quot;http://commonmark.org/help/&quot; title=&quot;Get the lowdown&quot;&gt;actually means&lt;/a&gt;, and &lt;a href=&quot;https://www.google.co.uk/?gfe_rd=cr&amp;amp;ei=aYy5WJfXMIOFaIP7pqAM#q=love+markdown&quot; title=&quot;Google helps here&quot;&gt;who loves it&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;atom-can-help&quot;&gt;Atom Can Help&lt;/h2&gt;

&lt;p&gt;As you will see, the point of Markdown is that it keeps you focussed on the words and not the style. It also keeps you disciplined to use a limited number of structural elements in your writing; headings (h1 - h6), paragraph, lists and inline emphasise with &lt;strong&gt;bold&lt;/strong&gt; and &lt;em&gt;italics&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So, once you learn how to tag these elements it all gets as easy as falling off a log. However, if you need that extra bit of support (a lifejacket I suppose), then you can download the Markdown writer package and toolbar to extend Atom; then you get a line-up of icons that will make life even easier.&lt;/p&gt;

&lt;h2 id=&quot;but-what-does-it-look-like-when-im-done&quot;&gt;But what does it look like when I’m done?&lt;/h2&gt;

&lt;p&gt;OK, so you want to see the results? Again, just add the Markdown previewer to Atom, and you see the results right alongside. Check out the screenshot alongside here.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/03/Screenshot 2017-03-03 15.46.14.png&quot;&gt;&lt;img src=&quot;/images/2017/03/Screenshot 2017-03-03 15.46.14.png&quot; alt=&quot;Markdown previewer shows this text&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;ok-but-what-else-can-i-do-with-the-text&quot;&gt;Ok But what else can I do with the text?&lt;/h2&gt;

&lt;p&gt;Alight, I know. Your publisher wants a Word file.&lt;/p&gt;

&lt;p&gt;No problem. Just follow these steps and all will be well withe the world:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download a copy of Pandoc (a universal text converter) &lt;a href=&quot;http://pandoc.org&quot; title=&quot;Brilliant work&quot;&gt;from here&lt;/a&gt; and install it.&lt;/li&gt;
  &lt;li&gt;Extend Atom with the Pandoc-Convert package&lt;/li&gt;
  &lt;li&gt;When ready to convert, use the Atom command palette and type &lt;code class=&quot;highlighter-rouge&quot;&gt;convert&lt;/code&gt; and find &lt;code class=&quot;highlighter-rouge&quot;&gt;docx&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-about-just-writing-with-no-distraction&quot;&gt;What about just writing with no distraction?&lt;/h2&gt;

&lt;p&gt;What you see in the above example is a little more complex that the normal writing, since i have lots of links and images. But I didn’t write that code; I just tapped the link icon on the toolbar.&lt;/p&gt;

&lt;h3 id=&quot;zen&quot;&gt;Zen&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/03/Screenshot 2017-03-03 16.29.05.png&quot;&gt;&lt;img src=&quot;/images/2017/03/Screenshot 2017-03-03 16.29.05.png&quot; alt=&quot;See no distractions&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try the Zen package to add to Atom, and then with a hotkey combination you can get to your writing without any distractions.&lt;/p&gt;

&lt;h3 id=&quot;like-what-you-see-or-not&quot;&gt;Like what you see? Or Not?&lt;/h3&gt;

&lt;p&gt;You can change the theme and get an entirely different environment.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/03/Screenshot 2017-03-03 16.43.40.png&quot;&gt;&lt;img src=&quot;/images/2017/03/Screenshot 2017-03-03 16.43.40.png&quot; alt=&quot;Youcan choose a light theme if you prefer&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;and-web-sites&quot;&gt;And web sites&lt;/h2&gt;

&lt;p&gt;Well that a whole different story, but this web site is entirely created and edited with Atom. I use a static web generator called Jekyll; Atom can directly create content and load up to the site repository when ready.&lt;/p&gt;

&lt;p&gt;Like now!&lt;/p&gt;

&lt;p&gt;Thanks for reading…&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>From Apple's Pages to Markdown</title>
   <link href="http://localhost:4000/conversion/markdown/2017/02/10/frompages2markdown-md/"/>
   <updated>2017-02-10T11:40:00+00:00</updated>
   <id>http://localhost:4000/conversion/markdown/2017/02/10/frompages2markdown-md</id>
   <content type="html">&lt;p&gt;I have a lot of documents authored with Apple’s Pages. I wanted to convert these to markdown texts with the images (mostly screen grabs). The Pages file format is a proprietary format, and so we are dependent on the limited export features that the program itself provides. So how can we do this?&lt;/p&gt;

&lt;h2 id=&quot;apple-pages&quot;&gt;Apple pages&lt;/h2&gt;

&lt;p&gt;I think &lt;em&gt;pages&lt;/em&gt; is a very nice word processor and I have been using for some time to build documents for my students, to either print out or convert to PDF for delivery on our Moodle pages.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/02/pagessample.png&quot;&gt;&lt;img src=&quot;/images/2017/02/pagessample.png&quot; alt=&quot;Here is a sample from a Pages document.&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But I don’t want to print this type of material anymore. Beside, I need to update every year. Making version changes needs to happen more frequently, these documents really need to be delivered as web pages. Editing (and creating new pages) is better done with a markdown text editor.&lt;/p&gt;

&lt;h2 id=&quot;the-workflow&quot;&gt;The workflow&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Pages&lt;/em&gt; is good at giving you options for export. You can export to PDF, Word, Plain text and ePub. But, you can’t export to HTML or markdown.&lt;/p&gt;

&lt;p&gt;The challenge then was to take the Pages document and recreate as markdown for use here on this site, so the pages can be easily maintained.&lt;/p&gt;

&lt;h2 id=&quot;pandoc-to-the-rescue&quot;&gt;Pandoc to the rescue&lt;/h2&gt;

&lt;p&gt;I just love this Pandoc. Thanks to &lt;a href=&quot;http://johnmacfarlane.net/&quot; title=&quot;Read about John MacFarlane&quot;&gt;John Macfarlane&lt;/a&gt;, a Professor of Philosophy at the University of California, we can convert just about any document format to any other with this universal document converter.&lt;/p&gt;

&lt;p&gt;You can read the &lt;a href=&quot;http://pandoc.org&quot; title=&quot;Take a look at the details&quot;&gt;details here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pandoc is great but it does &lt;strong&gt;not&lt;/strong&gt; offer Apple’s Pages as a source file format, so we need to use the Microsoft Word format as an interim. Here is what we do once we have Pandoc installed.&lt;/p&gt;

&lt;p&gt;Export from pages to Word (make sure to use docx - the default)
Locate the file just exported in the finder and change directory to there.&lt;/p&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;div class=&quot;codehilite&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; documents/myfles
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;pandoc&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; --wrap=none --extract-media=images somefile.docx
&lt;/span&gt; -o mynewfile.md
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here is an explanation of this terminal command:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;first we change into the folder where our Word document has been saved&lt;/li&gt;
  &lt;li&gt;we now use pandoc with these parameters:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wrap=none&lt;/code&gt; tells pandoc to not wrap the text that it finds. In other words, allow the text to flow except where there are specific paragraph breaks&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;extract-media=images&lt;/code&gt; will pull the images out of the Word document and put them into a folder called images. This will be &lt;em&gt;inside&lt;/em&gt; a media folder that pandoc creates automatically.&lt;/li&gt;
      &lt;li&gt;then we have the input file followed by the output needed. The &lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt; extension tells pandoc to create a markdown file.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we have a markdown file and then all of the images from the Word document, will be put into the images folder (inside a media folder). The images will be renamed &lt;em&gt;image1.png&lt;/em&gt;, &lt;em&gt;image2.png&lt;/em&gt; etc (if they were originally png files) or &lt;em&gt;image1.jpg&lt;/em&gt; if they were originally JPEG files.&lt;/p&gt;

&lt;h2 id=&quot;the-markdown-file&quot;&gt;The Markdown file&lt;/h2&gt;
&lt;p&gt;The markdown file will now need some editing. Here is what a portion looks like:&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;codehilite&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;Extracting XML from InDesign depends on a number of factors, but if we
successfully achieve our goal then we can be pleased that we have styled
all of our content and mapped these styles to our document structure.
&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_Toc1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anchor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;What is XML and why do we want
it?
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The reason that we are not seeing markdown headings with &lt;code class=&quot;highlighter-rouge&quot;&gt;##&lt;/code&gt; is because our pages document did not have named styles that could be converted. Not perfect, but we know that any span tag like this one is a heading, so we simply use a GREP search and replace like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-grep&quot;&gt;&amp;lt;span id=&quot;.+?&quot; class=&quot;anchor&quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replaced with &lt;code class=&quot;highlighter-rouge&quot;&gt;## &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can remove the table of contents.&lt;/p&gt;

&lt;p&gt;More GREP search and replace, will then help to build the image links with the correct structure and image location.&lt;/p&gt;

&lt;p&gt;The image links have a width and height set, so we can easily replace this too.&lt;/p&gt;

&lt;p&gt;Finally, we need to add our ALT tag text for each image.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Validation</title>
   <link href="http://localhost:4000/html/2017/02/05/validation/"/>
   <updated>2017-02-05T15:39:00+00:00</updated>
   <id>http://localhost:4000/html/2017/02/05/validation</id>
   <content type="html">&lt;p&gt;Everything needs to be perfect for it to work in the digital domain. Or does it? Can our screens forgive our little markup errors?&lt;/p&gt;

&lt;h2 id=&quot;checking-for-errors-we-have-to-do-it-so-often&quot;&gt;Checking for Errors. We have to do it so often!&lt;/h2&gt;

&lt;p&gt;If you create web sites, apps or eBooks then you are sure to have a few mark-up errors. So how can we check for errors?&lt;/p&gt;

&lt;h3 id=&quot;html&quot;&gt;HTML&lt;/h3&gt;

&lt;p&gt;In the world &lt;em&gt;wild&lt;/em&gt; web there are several flavours of HTML markup in use, and in a previous post we talked of HTML5 and XHTML. At one time it was possible to be able to choose your favourite from HTML3, HTM4 and even transitional versions.&lt;/p&gt;

&lt;p&gt;But what does it mean to have different versions? To a certain extent this is really a chronological thing. As you would expect, as time goes by, things improve and new versions make the experience of rendering HTML into a web page gets better. But it wasn’t always so straightforward because web browsers have often interpreted the HTML tags and stylesheets (CSS) in different ways. Oftentimes a web developer would start off by making the markup valid (according to the rules) but then the web browser would deliver the unexpected and hacks would need to be applied.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;forgiveness-is-a-dangerous-beautiful-thing&quot;&gt;Forgiveness is a &lt;del&gt;dangerous&lt;/del&gt; beautiful thing&lt;/h2&gt;

&lt;p&gt;The latest iteration of HTML is known as &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML5&lt;/code&gt; although, in fact some have suggested that we don’t need versions anymore. We’re beyond that now. It’s just HTML. Anyway, HTML5 doesn’t really replace earlier versions, it just builds on them. With HTML5 you get the ability to use some special tags that had previously been needed and were made to work in a ‘roundabout’ way:&lt;/p&gt;

&lt;p&gt;Previously:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;codehilite&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navigation&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
... some menu items
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now we can just use:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;codehilite&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
... some menu items
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;But also, HTML5 is very forgiving, because you can leave tags unclosed and the browser is supposed to take a jolly good guess at what is supposed to be.&lt;/p&gt;

&lt;h2 id=&quot;doctypes&quot;&gt;Doctypes&lt;/h2&gt;

&lt;p&gt;In a pre-HTML5 world, web pages needed a &lt;em&gt;doctype&lt;/em&gt; at the head of the markup, so that if you really wanted to deliver to a particular HTML version, the browser &lt;em&gt;was supposed to&lt;/em&gt; read that first to interpret correctly. Maybe it did, maybe it didn’t (I won’t go into &lt;strong&gt;quirks&lt;/strong&gt; mode).&lt;/p&gt;

&lt;p&gt;Still, doctypes are significant if you need to validate the markup (stay with me here, because we &lt;strong&gt;do&lt;/strong&gt; need to validate for the ePub).&lt;/p&gt;

&lt;p&gt;Let’s have a look at some doctype declarations:&lt;/p&gt;

&lt;p&gt;Here is a transitional one:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;codehilite&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here is a strict one:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;codehilite&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And here is HTML5, pure and simple, no references to data held on the web:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;codehilite&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;how-can-we-validate&quot;&gt;How can we validate?&lt;/h2&gt;

&lt;h3 id=&quot;html-1&quot;&gt;HTML&lt;/h3&gt;
&lt;p&gt;You can validate your web page by &lt;a href=&quot;https://validator.w3.org/nu/&quot; title=&quot;The online validator&quot; target=&quot;_blank&quot;&gt;going to this web site&lt;/a&gt; and putting in the a link to the file.&lt;/p&gt;

&lt;p&gt;There are several options, but be aware that the validation process needs to know what HTML version you are using, and it gets this from the DOCTYPE.&lt;/p&gt;

&lt;p&gt;All being well you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/02/validation1.png&quot;&gt;&lt;img src=&quot;/images/2017/02/validation1.png&quot; alt=&quot;We succesfully validated this XHTML file&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To validate the CSS &lt;a href=&quot;https://jigsaw.w3.org/css-validator/&quot; title=&quot;Validate the CSS&quot; target=&quot;_blank&quot;&gt;go to the Jigsaw validator here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The sample page that I have produced has validated but we need to aware of a few things:&lt;/p&gt;

&lt;p&gt;First the web page must be named with .xhtml. This will inform the validator that we are using XHTML rather than just plain HTML.&lt;/p&gt;

&lt;h3 id=&quot;why-xhtml-then&quot;&gt;Why XHTML then?&lt;/h3&gt;

&lt;p&gt;It turns out that ePUB3 (the eBook format that we are targeting) uses the XHTML markup standard, so we want to do the same from the beginning of our learning about these things. HTML5 is just too &lt;em&gt;loose&lt;/em&gt; for out requirements.&lt;/p&gt;

&lt;h2 id=&quot;epub&quot;&gt;ePub&lt;/h2&gt;

&lt;p&gt;The ePub standard for delivering eBooks is a wrapped-up package of files, consisting (mostly) of HTML and CSS, although, actually the HTML is a particular flavour; &lt;code class=&quot;highlighter-rouge&quot;&gt;XHTML5&lt;/code&gt;. This means that it must conform to a very strict set of rules.&lt;/p&gt;

&lt;p&gt;We can also validate the ePub by using an &lt;a href=&quot;http://validator.idpf.org&quot; title=&quot;Validate the ePub&quot; target=&quot;_blank&quot;&gt;online service at the IDPF web site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However this is limited to 10MB and this is a serious limitation, so you may need to &lt;a href=&quot;https://github.com/IDPF/epubcheck/releases&quot; title=&quot;Grab the latest version&quot; target=&quot;_blank&quot;&gt;download a copy of ePubCheck&lt;/a&gt; (a java application) and run this locally through the terminal.&lt;/p&gt;

&lt;p&gt;With the Mac Terminal application open locate the ePubcheck file that you just downloaded and:&lt;/p&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;div class=&quot;codehilite&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; /Applications/Utilities/ebook_tools/epubcheck-4.0.2
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; -jar pubcheck-4.0.2 path to the ePub file
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You should see something like this:&lt;/p&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;div class=&quot;codehilite&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Validating&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; using EPUB version 3.0.1 rules.
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;No&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; errors or warnings detected.
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;epubcheck&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; completed
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;All sorts of code will need validating and by &lt;a href=&quot;http://codebeautify.org&quot; title=&quot;This is very useful indeed&quot; target=&quot;_blank&quot;&gt;going to CodeBeautify&lt;/a&gt; you are bound to find exactly what you need.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Chris Colyer’s Website is the &lt;a href=&quot;https://css-tricks.com/snippets/css/browser-specific-hacks/&quot; title=&quot;Off to the web&quot; target=&quot;_blank&quot;&gt;goto place&lt;/a&gt; for browser hacks:&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>HTML, XHTML, HTML5 or XHTML5</title>
   <link href="http://localhost:4000/html/2017/02/03/htmlORxhtml/"/>
   <updated>2017-02-03T11:00:00+00:00</updated>
   <id>http://localhost:4000/html/2017/02/03/htmlORxhtml</id>
   <content type="html">&lt;p&gt;Goodness me there seem to be so many flavours of HTML. What does this all mean for eBook production and why should we care?&lt;/p&gt;

&lt;h2 id=&quot;so-you-thought-it-was-just-html&quot;&gt;So you thought it was just ‘HTML’!&lt;/h2&gt;

&lt;p&gt;HTML5 is the newest version of HTML and is very ‘loose’ and forgiving. In fact when you create HTML5 markup you do not need to close the tags.&lt;/p&gt;

&lt;p&gt;For example this is acceptable in HTML5:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;codehilite&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;This is a heading
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is a paragraph
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;eBooks made to ePub3 standard use HTML but the markup is very strict. In fact the markup should conform to &lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt; standards and this means that the format is actually &lt;code class=&quot;highlighter-rouge&quot;&gt;XHTML5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the above markup snippet to conform to &lt;code class=&quot;highlighter-rouge&quot;&gt;XHTML&lt;/code&gt; (and thus ePub3) it would need to be:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;codehilite&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;This is a heading&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is a paragraph&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In order to validate XHTML you need to name the file with the XHTML extension; thus &lt;code class=&quot;highlighter-rouge&quot;&gt;recipe.xhtml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are also some very specific items that need to go at the head of an XHTML file. Here are the required items:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;codehilite&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
and so on
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, although the doctype is &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt;, the namespace (&lt;code class=&quot;highlighter-rouge&quot;&gt;xmlns&lt;/code&gt;) is using the one from the World Wide Web consortium for &lt;code class=&quot;highlighter-rouge&quot;&gt;xhtml&lt;/code&gt;.&lt;/p&gt;
</content>
 </entry>
 

</feed>
